// input mass        ----------------8---------------
0001_0000000000_00000000000000000000000100111001
0001_0000000001_00000000000000000000000000001011
0001_0000000010_00000000000000000000000000000101
0001_0000000011_00000000000000000000000000011011
0001_0000000100_00000000000000000000000000001111
0001_0000000101_00000000000000000000000000001101
// input values, size and iter for first subprogram
0001_0000001000_00000000000000000000000000000110 // 6 <- size simple mass
0001_0000001001_00000000000000000000000000001010 // adr iter simple mass
0001_0000001010_00000000000000000000000000000000 // iter simple mass
0001_0000001011_00000000000000000000000000001100 // adr iter RAL
0001_0000001100_00000000000000000000000000100001 // iter RAL
0001_0000001101_00000000000000000000000000000000 // adr iter RAR
0001_0000001110_00000000000000000000000000000000 // iter RAR
//
0001_0000010000_00000000000000000000000000010001 // adr 0
0001_0000010001_00000000000000000000000000000000 // 0
//
0001_0000010010_00000000000000000000000000010011 // adr 1
0001_0000010011_00000000000000000000000000000001 // 1
//
0001_0000010100_00000000000000000000000000010101 // adr L_COPY // ard COPY
0001_0000010101_00000000000000000000000000000000 // L_COPY
0001_0000010110_00000000000000000000000000001000 // adr size simple mass
0001_0000010111_00000000000000000000000000000000 // R_COPY
0001_0000011000_00000000000000000000000001000111 // adr size new mass
0001_0000011001_00000000000000000000000001001000 // adr new mass iter
0001_0000011010_00000000000000000000000000000000 // iter po size
0001_0000011011_00000000000000000000000000011010 // adr iter po size

0001_0000011100_00000000000000000000000000011101 //  adr number size
0001_0000011101_00000000000000000000000000000000 //  number size
0001_0000011110_00000000000000000000000000001010 //  ÏÐÎÑÒÎ ÖÈÔÅÐÊÀ 10
0001_0000011111_00000000000000000000000000011110 // adr 10
//
0001_0000100000_00000000000000000000000000100001 //   iter mass
0001_0000100001_00000000000000000000000000000000 //   mass[0]
0001_0001000001_00000000000000000000000001000000 // adres parapara
0001_0001000010_00000000000000000000000001000011 // adr 33
0001_0001000011_00000000000000000000000000100001 // 33
0001_0001000100_00000000000000000000000000100000 // adr iter mss
0001_0001000111_00000000000000000000000000000000 // size new mass
0001_0001001000_00000000000000000000000001001001 // iter new mass
0001_0001001001_00000000000000000000000000000000 // new mass[0]
// start program - 9
0111_0001000001_0000010000_0000000000000000000000 //  MOV parapara, 0
0000_0000000000_00000000000000000000000000000000
1110_0001000001_0000001010_0000000000000000000000 // CALL subprogram 1
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0110_0001000001_0000010000_0000000000000000000000 //  CMP parapara, 0
0100_0000110100_00000000000000000000000000000000 //   JMP_GZ -> INCR iter simple mass (58)
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0111_0001001000_0000001010_0000000000000000000000 //  MOV new mass[i], simple nass[i]
0101_0001001000_00000000000000000000000000000000 //   INCR iter new mass
0101_0001000111_00000000000000000000000000000000 //   INCR size new mass
0101_0000001010_00000000000000000000000000000000 //   INCR iter simple mass
0000_0000000000_00000000000000000000000000000000
0110_0000010110_0000001001_0000000000000000000000 //  CMP iter simple mass, simple mass size
1000_0000100110_00000000000000000000000000000000 //   JMP_NZ -> start program
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0011_0001001000_0001000111_0001001000_000000000000 // SUB iter new mass = iter new mass - size new mass
0000_0000000000_00000000000000000000000000000000
1110_0001101100_0000001010_0000000000000000000000 //  CALL subprogram 2
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
// start subprogram 1 - 10
0000_0000000000_00000000000000000000000000000000
1010_0000001010_0000011111_0000100000_000000000000 // MOD simple mass[i], 10
0101_0000100000_00000000000000000000000000000000 //   INCR iter mass
0101_0000011101_00000000000000000000000000000000 //   INCR number size
1011_0000001010_0000011111_0000001010_000000000000 // DIV simple mass[i]
0000_0000000000_00000000000000000000000000000000
0110_0000001010_0000010000_0000000000000000000000 //  CMP simple mass[i], 0
1000_0001000001_00000000000000000000000000000000 //   JMP_NZ -> start subprogram
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0010_0000001100_0000011101_0000001110_000000000000 // ADD RAL, number size -> RAR
0000_0000000000_00000000000000000000000000000000
0011_0000001110_0000010011_0000001110_000000000000 // SUB RAR = RAR - 1
0000_0000000000_00000000000000000000000000000000
0110_0000001100_0000001110_0000000000000000000000 //  CMP mass[RAL],  mass[RAR]
1000_0001100111_00000000000000000000000000000000 //   JMP_NZ -> end subprogram
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0101_0000001100_00000000000000000000000000000000 //   INCR RAL
0011_0000001110_0000010011_0000001110_000000000000 // SUB RAR = RAR - 1
0101_0000011010_00000000000000000000000000000000 //   INCR iter po size
0101_0000011010_00000000000000000000000000000000 //   INCR iter po size
0110_0000011011_0000011100_0000000000000000000000 //  CMP iter po size, number size
1000_0001010000_00000000000000000000000000000000 //   JMP_NZ -> CMP mass[RAL],  mass[RAR] (84)
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0001_0001000000_00000000000000000000000000000001 //   simple mass[i] eto parapara
0000_0000000000_00000000000000000000000000000000
0111_0000011011_0000010000_0000000000000000000000 // MOV iter po size, 0
0000_0000000000_00000000000000000000000000000000
0111_0000001011_0001000010_0000000000000000000000 // MOV RAL, 33
0000_0000000000_00000000000000000000000000000000
0111_0001000100_0001000010_0000000000000000000000 // MOV iter mass, 33
0000_0000000000_00000000000000000000000000000000
0111_0000011100_0000010000_0000000000000000000000 // MOV number size, 0
0000_0000000000_00000000000000000000000000000000
1111_0000000000_00000000000000000000000000000000 //   RET
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
// start subprogram 2 - 11
0010_0001000111_0001001000_0001000111_000000000000 // ADD mew size = new size + new iter
0000_0000000000_00000000000000000000000000000000
0111_0000010100_0001001000_0000000000000000000000 // MOV COPY, new mass[0]
0101_0001001000_00000000000000000000000000000000 //  INCR new mass iter
0000_0000000000_00000000000000000000000000000000
0110_0000010100_0001001000_0000000000000000000000 // CMP COPY, new mass[i]
1000_0001110111_00000000000000000000000000000000 //  JMP_NZ -> INCR new mass iter (129)
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0111_0000010100_0001001000_0000000000000000000000 // MOV COPY, new mass[0]
0101_0001001000_00000000000000000000000000000000 //  INCR new mass iter
0000_0000000000_00000000000000000000000000000000
0110_0000011000_0000011001_0000000000000000000000 // CMP size, new mass iter
1000_0001110001_00000000000000000000000000000000 //  JMP_NZ -> CMP COPY, new mass[i] (108)
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
1111_0000000000_00000000000000000000000000000000 //  RET
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000