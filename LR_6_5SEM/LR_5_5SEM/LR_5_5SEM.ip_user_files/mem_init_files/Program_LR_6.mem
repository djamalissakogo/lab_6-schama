// input mass        ----------------8---------------
0001_0000000000_00000000000000000000000100111001
0001_0000000001_00000000000000000000000000001011
0001_0000000010_00000000000000000000000000000101
0001_0000000011_00000000000000000000000000011011
0001_0000000100_00000000000000000000000000001111
0001_0000000101_00000000000000000000000000001101
// input values, size and iter for first subprogram
0001_0000001000_00000000000000000000000000000110 // 6 <- size simple mass
0001_0000001001_00000000000000000000000000001010 // adr iter simple mass
0001_0000001010_00000000000000000000000000000000 // iter simple mass
0001_0000001011_00000000000000000000000000000000 // adr iter RAL
0001_0000001100_00000000000000000000000000000000 // iter RAL
0001_0000001101_00000000000000000000000000000000 // adr iter RAR
0001_0000001110_00000000000000000000000000000000 // iter RAR
//
0001_0000010000_00000000000000000000000000010001 // adr numbers of leading zeros
0001_0000010001_00000000000000000000000000000000 // numbers of leading zeros
//
0001_0000010010_00000000000000000000000000010011 // adr number of significant bits // по идее можно сразу на 2 поделить // или вычесть 1
0001_0000010011_00000000000000000000000000000000 // number of significant bits
//
0001_0000010100_00000000000000000000000000010101 // adr L_COPY
0001_0000010101_00000000000000000000000000000000 // L_COPY
0001_0000010110_00000000000000000000000000010111 // adr R_COPY
0001_0000010111_00000000000000000000000000000000 // R_COPY
0001_0000011000_00000000000000000000000000011001 // adr new L_COPY
0001_0000011001_00000000000000000000000000000000 // new L_COPY
0001_0000011010_00000000000000000000000000000000 // sum iter RAR, iter RAL
0001_0000011011_00000000000000000000000000011010 // adr sum iter RAR, iter RAL

0001_0000011100_00000000000000000000000000000001 //  ПРОСТО ЦИФЕРКА 1
0001_0000011101_00000000000000000000000000010000 //  ПРОСТО ЦИФЕРКА 32
0001_0000011110_00000000000000000000000000000000 //  ПРОСТО ЦИФЕРКА 0
0001_0000011111_00000000000000000000000000011110 // adr 0
// start subprogram 1
0111_0000010100_0000001010_0000000000000000000000 // MOV L_COPY, mass[iter simple mass]
0111_0000010110_0000001010_0000000000000000000000 // MOV R_COPY, mass[iter simple mass]
0111_0000011000_0000010100_0000000000000000000000 // MOV new L_COPY, L_COPY
0000_0000000000_00000000000000000000000000000000
1011_0000011001_00000000000000000000000000000000 //  RAL new L_COPY
0000_0000000000_00000000000000000000000000000000
0101_0000001100_00000000000000000000000000000000 //  INCR iter RAL
0100_0000100001_00000000000000000000000000000000 //  JMP_GZ -> RAL new L_COPY
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0011_0000001100_0000011100_0000001100_000000000000 // iter RAL = iter RAL - 1
0111_0000010000_0000001011_0000000000000000000000 //  MOV numbers of leading zeros, iter RAL
0011_0000011101_0000010000_0000010011_000000000000 // number of significant bits = 32 - numbers of leading zeros
// 0111_0000001011_0000011111_0000000000000000000000 //  MOV iter RAL, 0
// теперь на границах левой и правой копий стоят значимые биты
1010_0000010111_00000000000000000000000000000000 //   RAR  R_COPY
1110_0001001000_00000000000000000000000000000000 //   JMP_NRL -> end of subprogram
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
1011_0000011001_00000000000000000000000000000000 //   RAL new L_COPY
1010_0000010111_00000000000000000000000000000000 //   RAR  R_COPY
0101_0000001110_00000000000000000000000000000000 //   INCR iter RAR
0101_0000001100_00000000000000000000000000000000 //   INCR iter RAL
0010_0000001110_0000001100_0000011010_000000000000 // ADD sum =  iter RAR + iter RAL
1110_0001001000_00000000000000000000000000000000 //   JMP_NRL -> end of subprogram
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0100_0000111010_00000000000000000000000000000000 //   JMP_GZ -> start of subprogram
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0000_0000000000_00000000000000000000000000000000
0001_0000100000_00000000000000000000000000000001 //   number is palindrom
1111_0000000000_00000000000000000000000000000000 //   RET